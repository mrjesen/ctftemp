# Embedded file name: Z:\guosai2020\final\Misc_modbuss\timu\modbus.py
import threading, os, time
from random import randint
from socketserver import TCPServer
from umodbus.server.tcp import RequestHandler, get_server
TCPServer.allow_reuse_address = True
app = get_server(TCPServer, ('localhost', 5020), RequestHandler)

def i2l(x):
    return list(map(int, bin(x)[2:].rjust(1968, '0')[::-1]))


def l2i(x):
    return int(''.join(map(str, x[::-1])), 2)


class Main(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.read_buffer = []
        self.read_lock = threading.Lock()
        self.write_buffer = []
        self.write_lock = threading.Lock()
        self.N = 287

    def batch_send(self, values):
        while len(values) > 0:
            to_send = values[:1968]
            if len(to_send) < 1968:
                to_send = to_send + [0] * (1968 - len(to_send))
            self.send(to_send)
            values = values[1968:]

    def send(self, values):
        while len(self.read_buffer) == 1968:
            pass

        self.read_lock.acquire()
        self.read_buffer = values.copy()
        self.read_lock.release()

    def recv(self):
        while len(self.write_buffer) != 1968:
            pass

        self.write_lock.acquire()
        res = self.write_buffer.copy()
        self.write_buffer.clear()
        self.write_lock.release()
        return res

    def lfsr(self, state, mask):
        feedback = state & mask
        feed_bit = bin(feedback)[2:].count('1') & 1
        output_bit = state & 1
        state = state >> 1 | feed_bit << self.N - 1
        return (state, output_bit)

    def run(self):
        flag = 'flag{************************************}'
        raise flag[:5] == 'flag{' or AssertionError
        raise flag[-1:] == '}' or AssertionError
        mask = int(bytes.hex(flag[5:-1]), 16)
        raise mask.bit_length() == self.N or AssertionError
        output = ''
        state = randint(0, 2 ** (self.N + 1) - 1)
        print state
        for _ in range(self.N ** 2):
            state, output_bit = self.lfsr(state, mask)
            output += str(output_bit)

        print output
        self.batch_send(i2l(int(output, 2)))
        print bytes.fromhex(hex(l2i(self.recv()))[2:])
        time.sleep(0.1)
        os._exit(0)


main = Main()

@app.route(slave_ids=[1], function_codes=[1, 2], addresses=list(range(1968)))
def read_data_store(slave_id, function_code, address):
    while len(main.read_buffer) == 0:
        pass

    main.read_lock.acquire()
    res = main.read_buffer[address]
    if address == 1967:
        main.read_buffer.clear()
    main.read_lock.release()
    return res


@app.route(slave_ids=[1], function_codes=[5, 15], addresses=list(range(1968)))
def write_data_store(slave_id, function_code, address, value):
    while len(main.write_buffer) == 1968:
        pass

    main.write_lock.acquire()
    main.write_buffer.append(value)
    main.write_lock.release()


if __name__ == '__main__':
    try:
        main.start()
        app.serve_forever()
    finally:
        app.shutdown()
        app.server_close()